# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test: # names the job
    runs-on: ubuntu-latest # sets the version of linux we want to use, should be what you have on your server

    strategy:
      fail-fast: false # tells github to not run further steps if this one fails
      matrix:
        node-version: [16.x] # sets the version of node we want to use, should be what you have on your server

    steps:
      - uses: actions/checkout@v2 # fetches your commit to test it
      - name: Use Node.js ${{ matrix.node-version }} # names our step
        uses: actions/setup-node@v1 # downloads node and npm
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install # installs your dependencies
      - run: npm run test # builds your app
      - run: npm test # runs your test suite
        env:
          CI: true # shows terminal output!

  deploy:
    runs-on: ubuntu-latest
    needs: test # this job depends on "test" having finished
    if: github.ref == 'refs/heads/main' # we tell Github to only execute this step if we're on our master branch (so we don't put unfinished branches in production)
    steps:
      - name: Deploying to KTHB
        uses: appleboy/ssh-action@master # An action made to control Linux servers
        with: # We set all our secrets here for the action, these won't be shown in the action logs
          host: ${{ secrets.KTHB_SITES_HOST }}
          username: ${{ secrets.KTHB_SITES_USERNAME }}
          password: ${{ secrets.KTHB_SITES_PASSWORD }}
          port: ${{ secrets.KTHB_SITES_SSHPORT }}
          script: |
            cd ./docker/kthb-dialog-nodejs # we move into our app's folder
            git pull # we pull any changes from git
            #npm prune # we remove any unused dependencies
            #npm install # we install any missing dependencies
            #npm run build # we build our app
            #pm2 reload all # we reload the app via PM2
            docker compose down
            docker compose up -d --build
