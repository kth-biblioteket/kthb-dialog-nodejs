<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content = "width = device-width, initial-scale = 1.0, minimum-scale = 1, maximum-scale = 1, user-scalable = no" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-title" content="KTH" />
    <meta name="apple-touch-fullscreen" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <link rel="apple-touch-icon" sizes="76x76" href="images/energy_icon.png">
    <link rel="shortcut icon" href="/favicon.ico">

    <title>KTHB Climate Pledge</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.4/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="/dialog/public/results.css">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.0/chart.min.js"
        integrity="sha512-GMGzUEevhWh8Tc/njS0bDpwgxdCJLQBWG3Z2Ct+JGOpVnEmjvNx6ts4v6A2XJf1HOrtOsfhv3hBKpK9kE5z8AQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="/dialog/public/chartjs-plugin-doughnutlabel-rebourne.js"></script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script>
    <script src="https://cdn.socket.io/4.4.0/socket.io.min.js"
        integrity="sha384-1fOn6VtTq3PWwfsOrk45LnYcGosJwzMHv+Xh/Jx5303FVOXzEnw0EpLv30mtjmlj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/1.11.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.4/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>
</head>

<body>
    <div id="pollbody">
        <div class="content-wrap">
            <div class="content">
                <img id="globe" src="/dialog/public/images/Surreal-Earth.png">
                <button id="move">Move</button>
                <div id="header">
                </div>
                <div id="content">
                    <div id="charttext"></div>
                    <div id="chartwrapper">
                        <div id="canvaswrapper">
                            <canvas id="myChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

</html>

<script>
    var api_url = "http://localhost:3012";
    var eventid = 1;
    var doughnutcentertext = "Pledges"
    var doughnutcentertext_sv = "Löften"
    var header_lib_tv = `<div>Make a climate pledge</div>
                        <div style="font-size:3.5vw">– How can you contribute to reduce climate change?</div>`
    var header_sv_lib_tv = `<div>Avge ett klimatlöfte</div>
    <div style="font-size:3.5vw">– Hur skulle du kunna bidra till att minska klimatförändringen?</div>`
    var header = "Climate pledges"
    var header_sv = "Klimatlöften"
    var charttext = "Pledges made so far"
    var charttext_sv = "Detta har andra lovat"
    var cutout = "70%"
    var radius ="70%"
    var XApiKey = 'kg897n987n98n)!dskjlksjfd?435mnckjsbsekef-_klknbhjhsef'
    var doughnutcentertotalfontsize = 108
    var doughnutcentertextfontsize = 48
    var textcolor = 'rgba(255, 255, 255, 0.8)'

    function getQuerystringparam (querystringparam) {
        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const value = urlParams.get(querystringparam)
        return value
    }

    function chunkString(str, maxWidth){
        const sections = [];
        const words = str.split(" ");
        let builder = "";

        for (const word of words) {
            if(word.length > maxWidth) {
            sections.push(builder.trim())
            builder = ""
            sections.push(word.trim())
            continue
            }

            let temp = `${builder} ${word}`
            if(temp.length > maxWidth) {
            sections.push(builder.trim())
            builder = word
            continue
            }

            builder = temp
        }
        sections.push(builder.trim())

        return sections;
    }

    var getTotal = function (myChart) {
        var sum = myChart.config.data.datasets[0].data.reduce((a, b) => a + b, 0);
        return sum;
    }

    var getDoughnutcentertext = function () {
        if (getQuerystringparam('lang') == 'sv') {
            return doughnutcentertext_sv
        } else {
            return doughnutcentertext
        }
    }

    if (getQuerystringparam('display') == 'libtv') {
        $('body').css('overflow', 'hidden');
    }

    if (getQuerystringparam('lang') == 'sv') {
        if (getQuerystringparam('display') == 'libtv') {
            $('#header').html(header_sv_lib_tv)
            $('#charttext').html(charttext_sv)
        } else {
            $('#header').html(header_sv)
            $('#charttext').html(charttext_sv)
        }
    } else {
        if (getQuerystringparam('display') == 'libtv') {
            $('#header').html(header_lib_tv)
            $('#charttext').html(charttext)
        } else {
            $('#header').html(header)
            $('#charttext').html(charttext)
        }
    }

    const ctx = document.getElementById('myChart');
    Chart.register(ChartDataLabels);
    Chart.register(DoughnutLabel);
    const myChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            datasets: [{}]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
                animateScale: true,
                animateRotate: true
            },
            borderWidth: 0,
            plugins: {
                title: {
                    display: false, 
                    position: "top", 
                    fullsize: false,
                    align: "start",
                    text: "",
                    padding: {
                        top: 200,
                        bottom: 30
                    },
                    color: 'rgba(255, 255, 255, 0.8)',
                    font: function (context) {
                        var avgSize = Math.round((context.chart.height + context.chart.width) / 2);
                        var size = Math.round(avgSize / 32);
                        return {
                            size: size + 3,
                            weight: 'bold'
                        };
                    },
                },
                legend: {
                    display: false
                },
                datalabels: {
                    labels: {
                        name: {
                            align: 'end',
                            anchor: 'end',
                            color: textcolor,
                            font: function (context) {
                                var avgSize = Math.round((context.chart.height + context.chart.width) / 2);
                                var size = Math.round(avgSize / 32);
                                return {
                                    size: size + 0,
                                    weight: 'bold'
                                };
                            },
                            formatter: function (value, ctx) {
                                return ctx.active
                                    ? ctx.dataset.data[ctx.dataIndex] + ''
                                    : ctx.chart.data.labels[ctx.dataIndex];
                            },
                            offset: 10,
                            opacity: function (ctx) {
                                return ctx.active ? 1 : 1;
                            }
                        }
                    }
                },
                doughnutlabel: {
                    paddingPercentage: 5,
                    labels: [
                        {
                            text: getTotal,
                            font: {
                                size: doughnutcentertotalfontsize,
                                family: '"Open Sans",Arial,"Helvetica Neue",helvetica,sans-ServiceUIFrameContext',
                                style: 'italic',
                                weight: 'bold',
                            },
                            color: textcolor,
                        },
                        {
                            text: getDoughnutcentertext,
                            font: {
                                size: doughnutcentertextfontsize,
                                family: '"Open Sans",Arial,"Helvetica Neue",helvetica,sans-ServiceUIFrameContext',
                                style: 'italic',
                                weight: 'bold',
                            },
                            color: textcolor,
                        },
                    ],
                }
            },
            cutout: cutout,
            radius: radius,
            layout: {
                padding: {
                    left: 70,
                    right: 70,
                    top: 0,
                    bottom: 70
                }
            }
        }
    });

    if (getQuerystringparam('ws') == 'true') {
        const socket = io('', { path: "/dialog/socket.io" })

        socket.on("FromAPI", function (data) {
            document.getElementById("globe").classList.toggle('animated')
            GETInitialVotes(false);
        });

        socket.on("connect", () => {
        });

        socket.on("disconnect", () => {
        });

        socket.on('error', console.error.bind(console));

    }

    function GETInitialVotes(first) {
        return fetch(api_url + '/dialog/api/v1/choice/' + eventid, {
            method: 'GET',
            headers: new Headers({
                'X-Api-Key': XApiKey
            }),
            mode: 'cors'
        }).then(function (res) {
            if (res.ok) {
                return res.json();
            } else {
                throw new TypeError('GETVotes error');
            }
        }).then(function (resJSON) {
            var currentNewVotes = resJSON.currentNewVotes
            var chartdataarray = [];
            var chartlabelarray = [];
            var chartbackgroundcolorarray = [];
            for (let i in currentNewVotes) {
                if (getQuerystringparam('lang') == 'sv') {
                    chartlabelarray.push(chunkString(currentNewVotes[i].description_sv, 10))
                } else {
                    chartlabelarray.push(chunkString(currentNewVotes[i].description_en, 10))
                }
                chartdataarray.push(currentNewVotes[i].choices)
                chartbackgroundcolorarray.push(currentNewVotes[i].rgbacolor)
            }
            myChart.data.datasets[0].data = chartdataarray;
            myChart.data.datasets[0].backgroundColor = chartbackgroundcolorarray;
            myChart.data.labels = chartlabelarray;
            if (first === true) {
            }
            myChart.update();
        }).catch(function (err) {
            console.log(err);
        });
    }

    GETInitialVotes(true)

    move.onclick = () => {
        document.getElementById("globe").classList.toggle('animated')
        GETInitialVotes(false);
    }
    const animated = document.getElementById('globe');
    animated.addEventListener('animationend', () => {
        document.getElementById("globe").classList.toggle('animated')
    });

</script>